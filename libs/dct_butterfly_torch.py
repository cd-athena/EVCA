import torch

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

g_t32 = torch.tensor([
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
    90, 90, 88, 85, 82, 78, 73, 67, 61, 54, 46, 38, 31, 22, 13, 4,
    -4, -13, -22, -31, -38, -46, -54, -61, -67, -73, -78, -82, -85, -88, -90, -90,
    90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90,
    -90, -87, -80, -70, -57, -43, -25, -9, 9, 25, 43, 57, 70, 80, 87, 90,
    90, 82, 67, 46, 22, -4, -31, -54, -73, -85, -90, -88, -78, -61, -38, -13,
    13, 38, 61, 78, 88, 90, 85, 73, 54, 31, 4, -22, -46, -67, -82, -90,
    89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
    89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
    88, 67, 31, -13, -54, -82, -90, -78, -46, -4, 38, 73, 90, 85, 61, 22,
    -22, -61, -85, -90, -73, -38, 4, 46, 78, 90, 82, 54, 13, -31, -67, -88,
    87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87,
    -87, -57, -9, 43, 80, 90, 70, 25, -25, -70, -90, -80, -43, 9, 57, 87,
    85, 46, -13, -67, -90, -73, -22, 38, 82, 88, 54, -4, -61, -90, -78, -31,
    31, 78, 90, 61, 4, -54, -88, -82, -38, 22, 73, 90, 67, 13, -46, -85,
    83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
    83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
    82, 22, -54, -90, -61, 13, 78, 85, 31, -46, -90, -67, 4, 73, 88, 38,
    -38, -88, -73, -4, 67, 90, 46, -31, -85, -78, -13, 61, 90, 54, -22, -82,
    80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80,
    -80, -9, 70, 87, 25, -57, -90, -43, 43, 90, 57, -25, -87, -70, 9, 80,
    78, -4, -82, -73, 13, 85, 67, -22, -88, -61, 31, 90, 54, -38, -90, -46,
    46, 90, 38, -54, -90, -31, 61, 88, 22, -67, -85, -13, 73, 82, 4, -78,
    75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
    75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
    73, -31, -90, -22, 78, 67, -38, -90, -13, 82, 61, -46, -88, -4, 85, 54,
    -54, -85, 4, 88, 46, -61, -82, 13, 90, 38, -67, -78, 22, 90, 31, -73,
    70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70,
    -70, 43, 87, -9, -90, -25, 80, 57, -57, -80, 25, 90, 9, -87, -43, 70,
    67, -54, -78, 38, 85, -22, -90, 4, 90, 13, -88, -31, 82, 46, -73, -61,
    61, 73, -46, -82, 31, 88, -13, -90, -4, 90, 22, -85, -38, 78, 54, -67,
    64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
    64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
    61, -73, -46, 82, 31, -88, -13, 90, -4, -90, 22, 85, -38, -78, 54, 67,
    -67, -54, 78, 38, -85, -22, 90, 4, -90, 13, 88, -31, -82, 46, 73, -61,
    57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57,
    -57, 80, 25, -90, 9, 87, -43, -70, 70, 43, -87, -9, 90, -25, -80, 57,
    54, -85, -4, 88, -46, -61, 82, 13, -90, 38, 67, -78, -22, 90, -31, -73,
    73, 31, -90, 22, 78, -67, -38, 90, -13, -82, 61, 46, -88, 4, 85, -54,
    50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
    50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
    46, -90, 38, 54, -90, 31, 61, -88, 22, 67, -85, 13, 73, -82, 4, 78,
    -78, -4, 82, -73, -13, 85, -67, -22, 88, -61, -31, 90, -54, -38, 90, -46,
    43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43,
    -43, 90, -57, -25, 87, -70, -9, 80, -80, 9, 70, -87, 25, 57, -90, 43,
    38, -88, 73, -4, -67, 90, -46, -31, 85, -78, 13, 61, -90, 54, 22, -82,
    82, -22, -54, 90, -61, -13, 78, -85, 31, 46, -90, 67, 4, -73, 88, -38,
    36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
    36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
    31, -78, 90, -61, 4, 54, -88, 82, -38, -22, 73, -90, 67, -13, -46, 85,
    -85, 46, 13, -67, 90, -73, 22, 38, -82, 88, -54, -4, 61, -90, 78, -31,
    25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25,
    -25, 70, -90, 80, -43, -9, 57, -87, 87, -57, 9, 43, -80, 90, -70, 25,
    22, -61, 85, -90, 73, -38, -4, 46, -78, 90, -82, 54, -13, -31, 67, -88,
    88, -67, 31, 13, -54, 82, -90, 78, -46, 4, 38, -73, 90, -85, 61, -22,
    18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
    18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
    13, -38, 61, -78, 88, -90, 85, -73, 54, -31, 4, 22, -46, 67, -82, 90,
    -90, 82, -67, 46, -22, -4, 31, -54, 73, -85, 90, -88, 78, -61, 38, -13,
    9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9,
    -9, 25, -43, 57, -70, 80, -87, 90, -90, 87, -80, 70, -57, 43, -25, 9,
    4, -13, 22, -31, 38, -46, 54, -61, 67, -73, 78, -82, 85, -88, 90, -90,
    90, -90, 88, -85, 82, -78, 73, -67, 61, -54, 46, -38, 31, -22, 13, -4], dtype=torch.int32, device=device)

g_t16 = torch.tensor([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
                      90, 87, 80, 70, 57, 43, 25, 9, -9, -25, -43, -57, -70, -80, -87, -90,
                      89, 75, 50, 18, -18, -50, -75, -89, -89, -75, -50, -18, 18, 50, 75, 89,
                      87, 57, 9, -43, -80, -90, -70, -25, 25, 70, 90, 80, 43, -9, -57, -87,
                      83, 36, -36, -83, -83, -36, 36, 83, 83, 36, -36, -83, -83, -36, 36, 83,
                      80, 9, -70, -87, -25, 57, 90, 43, -43, -90, -57, 25, 87, 70, -9, -80,
                      75, -18, -89, -50, 50, 89, 18, -75, -75, 18, 89, 50, -50, -89, -18, 75,
                      70, -43, -87, 9, 90, 25, -80, -57, 57, 80, -25, -90, -9, 87, 43, -70,
                      64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64, 64, -64, -64, 64,
                      57, -80, -25, 90, -9, -87, 43, 70, -70, -43, 87, 9, -90, 25, 80, -57,
                      50, -89, 18, 75, -75, -18, 89, -50, -50, 89, -18, -75, 75, 18, -89, 50,
                      43, -90, 57, 25, -87, 70, 9, -80, 80, -9, -70, 87, -25, -57, 90, -43,
                      36, -83, 83, -36, -36, 83, -83, 36, 36, -83, 83, -36, -36, 83, -83, 36,
                      25, -70, 90, -80, 43, 9, -57, 87, -87, 57, -9, -43, 80, -90, 70, -25,
                      18, -50, 75, -89, 89, -75, 50, -18, -18, 50, -75, 89, -89, 75, -50, 18,
                      9, -25, 43, -57, 70, -80, 87, -90, 90, -87, 80, -70, 57, -43, 25, -9], dtype=torch.int32,
                     device=device)

g_t8 = torch.tensor([64, 64, 64, 64, 64, 64, 64, 64,
                     89, 75, 50, 18, -18, -50, -75, -89,
                     83, 36, -36, -83, -83, -36, 36, 83,
                     75, -18, -89, -50, 50, 89, 18, -75,
                     64, -64, -64, 64, 64, -64, -64, 64,
                     50, -89, 18, 75, -75, -18, 89, -50,
                     36, -83, 83, -36, -36, 83, -83, 36,
                     18, -50, 75, -89, 89, -75, 50, -18], dtype=torch.int32, device=device)


def dct_8_2d(src):
    src = src.view(src.size(0), -1)
    row_dct = dct_8(src, 2)
    col_dct = dct_8(row_dct, 9)
    return col_dct.view(src.size(0), 8, 8).float()


def dct_8(src, shift):
    # initialization
    batch_size = src.size(0)

    ptr_src = 0
    ptr_dst = 0

    E = torch.zeros(batch_size, 4, dtype=torch.int32, device=device)
    O = torch.zeros(batch_size, 4, dtype=torch.int32, device=device)
    EE = torch.zeros(batch_size, 2, dtype=torch.int32, device=device)
    EO = torch.zeros(batch_size, 2, dtype=torch.int32, device=device)
    dst = torch.zeros(batch_size, 64, dtype=torch.int32, device=device)

    add = 1 << (shift - 1)

    for i in range(8):
        for j in range(4):
            E[:, j] = src[:, j + ptr_src] + src[:, 7 - j + ptr_src]
            O[:, j] = src[:, j + ptr_src] - src[:, 7 - j + ptr_src]

        EE[:, 0] = E[:, 0] + E[:, 3]
        EO[:, 0] = E[:, 0] - E[:, 3]
        EE[:, 1] = E[:, 1] + E[:, 2]
        EO[:, 1] = E[:, 1] - E[:, 2]

        dst[:, 0 + ptr_dst] = ((g_t8[0] * EE[:, 0] + g_t8[1] * EE[:, 1] + add) >> shift).to(torch.int32)
        dst[:, 4 * 8 + ptr_dst] = ((g_t8[32] * EE[:, 0] + g_t8[32 + 1] * EE[:, 1] + add) >> shift).to(torch.int32)
        dst[:, 2 * 8 + ptr_dst] = ((g_t8[16] * EO[:, 0] + g_t8[16 + 1] * EO[:, 1] + add) >> shift).to(torch.int32)
        dst[:, 6 * 8 + ptr_dst] = ((g_t8[48] * EO[:, 0] + g_t8[48 + 1] * EO[:, 1] + add) >> shift).to(torch.int32)

        dst[8 + ptr_dst] = ((g_t8[8] * O[:, 0] + g_t8[9] * O[:, 1] + g_t8[10] * O[:, 2] + g_t8[11] * O[:, 3] + add)
                            >> shift).to(torch.int32)
        dst[3 * 8 + ptr_dst] = (
                    (g_t8[24] * O[:, 0] + g_t8[25] * O[:, 1] + g_t8[26] * O[:, 2] + g_t8[27] * O[:, 3] + add)
                    >> shift).to(torch.int32)
        dst[5 * 8 + ptr_dst] = (
                    (g_t8[40] * O[:, 0] + g_t8[41] * O[:, 1] + g_t8[42] * O[:, 2] + g_t8[43] * O[:, 3] + add)
                    >> shift).to(torch.int32)
        dst[7 * 8 + ptr_dst] = (
                    (g_t8[56] * O[:, 0] + g_t8[57] * O[:, 1] + g_t8[58] * O[:, 2] + g_t8[59] * O[:, 3] + add)
                    >> shift).to(torch.int32)

        ptr_src += 8
        ptr_dst += 1
    return dst


def dct_16_2d(src):
    src = src.view(src.size(0), -1)
    row_dct = dct_16(src, 3)
    col_dct = dct_16(row_dct, 10)
    return col_dct.view(src.size(0), 16, 16).float()


def dct_16(src, shift):
    # initialization
    batch_size = src.size(0)

    ptr_src = 0
    ptr_dst = 0

    E = torch.zeros(batch_size, 8, dtype=torch.int32, device=device)
    O = torch.zeros(batch_size, 8, dtype=torch.int32, device=device)
    EE = torch.zeros(batch_size, 4, dtype=torch.int32, device=device)
    EO = torch.zeros(batch_size, 4, dtype=torch.int32, device=device)
    EEE = torch.zeros(batch_size, 2, dtype=torch.int32, device=device)
    EEO = torch.zeros(batch_size, 2, dtype=torch.int32, device=device)
    dst = torch.zeros(batch_size, 256, dtype=torch.int32, device=device)

    add = 1 << (shift - 1)

    for i in range(16):
        for j in range(8):
            E[:, j] = src[:, j + ptr_src] + src[:, 15 - j + ptr_src]
            O[:, j] = src[:, j + ptr_src] - src[:, 15 - j + ptr_src]
        for j in range(4):
            EE[:, j] = E[:, j] + E[:, 7 - j]
            EO[:, j] = E[:, j] - E[:, 7 - j]

        EEE[:, 0] = EE[:, 0] + EE[:, 3]
        EEO[:, 0] = EE[:, 0] - EE[:, 3]
        EEE[:, 1] = EE[:, 1] + EE[:, 2]
        EEO[:, 1] = EE[:, 1] - EE[:, 2]

        dst[:, 0 + ptr_dst] = ((g_t16[0] * EEE[:, 0] + g_t16[1] * EEE[:, 1] + add) >> shift).to(torch.int32)
        dst[:, 8 * 16 + ptr_dst] = ((g_t16[128] * EEE[:, 0] + g_t16[128 + 1] * EEE[:, 1] + add) >> shift).to(
            torch.int32)
        dst[:, 4 * 16 + ptr_dst] = ((g_t16[64] * EEO[:, 0] + g_t16[64 + 1] * EEO[:, 1] + add) >> shift).to(torch.int32)
        dst[:, 12 * 16 + ptr_dst] = ((g_t16[192] * EEO[:, 0] + g_t16[192 + 1] * EEO[:, 1] + add) >> shift).to(
            torch.int32)

        for j in range(2, 16, 4):
            dst[:, j * 16 + ptr_dst] = ((g_t16[j * 16 + 0] * EO[:, 0] + g_t16[j * 16 + 1] * EO[:, 1]
                                         + g_t16[j * 16 + 2] * EO[:, 2] + g_t16[j * 16 + 3] * EO[:, 3] + add)
                                        >> shift).to(torch.int32)

        for j in range(1, 16, 2):
            dst[:, j * 16 + ptr_dst] = (
                    (g_t16[j * 16 + 0] * O[:, 0] + g_t16[j * 16 + 1] * O[:, 1] + g_t16[j * 16 + 2] * O[:, 2]
                     + g_t16[j * 16 + 3] * O[:, 3] + g_t16[j * 16 + 4] * O[:, 4] + g_t16[j * 16 + 5] * O[:, 5]
                     + g_t16[j * 16 + 6] * O[:, 6] + g_t16[j * 16 + 7] * O[:, 7] + add)
                    >> shift).to(torch.int32)

        ptr_src += 16
        ptr_dst += 1
    return dst


def dct_32_2d(src):
    src = src.view(src.size(0), -1)
    row_dct = dct_32(src, 4)
    col_dct = dct_32(row_dct, 11)
    return col_dct.view(src.size(0), 32, 32).float()


def dct_32(src, shift):
    # initialization
    batch_size = src.size(0)
    ptr_src = 0
    ptr_dst = 0

    E = torch.zeros(batch_size, 16, dtype=torch.int32, device=device)
    O = torch.zeros(batch_size, 16, dtype=torch.int32, device=device)
    EE = torch.zeros(batch_size, 8, dtype=torch.int32, device=device)
    EO = torch.zeros(batch_size, 8, dtype=torch.int32, device=device)
    EEE = torch.zeros(batch_size, 4, dtype=torch.int32, device=device)
    EEO = torch.zeros(batch_size, 4, dtype=torch.int32, device=device)
    EEEE = torch.zeros(batch_size, 2, dtype=torch.int32, device=device)
    EEEO = torch.zeros(batch_size, 2, dtype=torch.int32, device=device)

    dst = torch.zeros(batch_size, 1024, dtype=torch.int32, device=device)

    add = 1 << (shift - 1)

    for i in range(32):
        for j in range(16):
            E[:, j] = src[:, j + ptr_src] + src[:, 31 - j + ptr_src]
            O[:, j] = src[:, j + ptr_src] - src[:, 31 - j + ptr_src]
        for j in range(8):
            EE[:, j] = E[:, j] + E[:, 15 - j]
            EO[:, j] = E[:, j] - E[:, 15 - j]
        for j in range(4):
            EEE[:, j] = EE[:, j] + EE[:, 7 - j]
            EEO[:, j] = EE[:, j] - EE[:, 7 - j]
        EEEE[:, 0] = EEE[:, 0] + EEE[:, 3]
        EEEO[:, 0] = EEE[:, 0] - EEE[:, 3]
        EEEE[:, 1] = EEE[:, 1] + EEE[:, 2]
        EEEO[:, 1] = EEE[:, 1] - EEE[:, 2]

        dst[:, 0 + ptr_dst] = ((g_t32[0] * EEEE[:, 0] + g_t32[1] * EEEE[:, 1] + add) >> shift).to(torch.int32)
        dst[:, 16 * 32 + ptr_dst] = ((g_t32[512] * EEEE[:, 0] + g_t32[512 + 1] * EEEE[:, 1] + add) >> shift).to(
            torch.int32)
        dst[:, 8 * 32 + ptr_dst] = ((g_t32[256] * EEEO[:, 0] + g_t32[256 + 1] * EEEO[:, 1] + add) >> shift).to(
            torch.int32)
        dst[:, 24 * 32 + ptr_dst] = ((g_t32[768] * EEEO[:, 0] + g_t32[768 + 1] * EEEO[:, 1] + add) >> shift).to(
            torch.int32)

        for j in range(4, 32, 8):
            dst[:, j * 32 + ptr_dst] = ((g_t32[j * 32 + 0] * EEO[:, 0] + g_t32[j * 32 + 1] * EEO[:, 1]
                                         + g_t32[j * 32 + 2] * EEO[:, 2] + g_t32[j * 32 + 3] * EEO[:, 3] + add)
                                        >> shift).to(torch.int32)

        for j in range(2, 32, 4):
            dst[:, j * 32 + ptr_dst] = ((g_t32[j * 32 + 0] * EO[:, 0] + g_t32[j * 32 + 1] * EO[:, 1]
                                         + g_t32[j * 32 + 2] * EO[:, 2] + g_t32[j * 32 + 3] * EO[:, 3]
                                         + g_t32[j * 32 + 4] * EO[:, 4] + g_t32[j * 32 + 5] * EO[:, 5]
                                         + g_t32[j * 32 + 6] * EO[:, 6] + g_t32[j * 32 + 7] * EO[:, 7] + add)
                                        >> shift).to(torch.int32)

        for j in range(1, 32, 2):
            dst[:, j * 32 + ptr_dst] = (
                    (g_t32[j * 32 + 0] * O[:, 0] + g_t32[j * 32 + 1] * O[:, 1] + g_t32[j * 32 + 2] * O[:, 2]
                     + g_t32[j * 32 + 3] * O[:, 3] + g_t32[j * 32 + 4] * O[:, 4] + g_t32[j * 32 + 5] * O[:, 5]
                     + g_t32[j * 32 + 6] * O[:, 6] + g_t32[j * 32 + 7] * O[:, 7] + g_t32[j * 32 + 8] * O[:, 8]
                     + g_t32[j * 32 + 9] * O[:, 9] + g_t32[j * 32 + 10] * O[:, 10] + g_t32[j * 32 + 11] * O[:, 11]
                     + g_t32[j * 32 + 12] * O[:, 12] + g_t32[j * 32 + 13] * O[:, 13] + g_t32[j * 32 + 14] * O[:, 14]
                     + g_t32[j * 32 + 15] * O[:, 15] + add).to(torch.int32)
                    >> shift)

        ptr_src += 32
        ptr_dst += 1
    return dst
